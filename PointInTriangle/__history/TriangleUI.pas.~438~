unit TriangleUI;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, CheckTriangle, ExtCtrls, Generics.Collections, cxGraphics,
  cxControls, cxLookAndFeels, cxLookAndFeelPainters, cxContainer, cxEdit,
  cxTextEdit, cxMaskEdit, cxDropDownEdit, cxCalc, Mask, RzEdit, RzCalcEdit,
  uGraph;

type
  TForm3 = class(TForm)
    mmShowJudge: TMemo;
    plDrawChoice: TPanel;
    btnCreateTri: TButton;
    lblTriNum: TLabel;
    edtTotalTri: TRzCalcEdit;
    procedure FormCreate(Sender: TObject);
    procedure btnCreateTriClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
  private
    FPaintBox: TMyPaintBox;
    ICheckPnt: IJudgePointInTri;
  public
    { Public declarations }
    function GetPointCheck: IJudgePointInTri;
    //function SetPoints(X1, X2, X3, Y1, Y2, Y3: Integer): TTriangle;
  end;

var
  Form3: TForm3;

implementation

uses
  uFrmTest;
{$R *.dfm}

procedure TForm3.FormCreate(Sender: TObject);
begin
  System.ReportMemoryLeaksOnShutdown := True;
  FPaintBox := TMyPaintBox.Create(Self);
  FPaintBox.Parent := Self;
  FPaintBox.Align := alNone;
  FPaintBox.Width := 700;
  FPaintBox.Height := 700;
end;

procedure TForm3.FormDestroy(Sender: TObject);
begin
  FPaintBox.TriList.Free;
  //FPaintBox.Triangle.Free;
end;

function TForm3.GetPointCheck: IJudgePointInTri;
begin
  Result := TCheckPoint.Create;
end;


procedure TForm3.btnCreateTriClick(Sender: TObject);
var
  NewTriList: TList<TTriangle>;
begin
  FPaintBox.CounterClick := True;
  ICheckPnt := GetPointCheck;
  NewTriList := ICheckPnt.CreateTri(Round(edtTotalTri.Value));

  FPaintBox.TriList.Free;
  FPaintBox.TriList := NewTriList;
 // ShowMessage(IntToStr(FPaintBox.TriList.Items[0].A.X));
  FPaintBox.Clear;
end;

end.
