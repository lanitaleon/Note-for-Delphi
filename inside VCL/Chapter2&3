2-4 object pascal对象服务

重载方法和继承相结合时

TBase = class(TObject)
...
  function DisappearRoutine1: String; overload; virtual;
  function DisappearRoutine1(const sName: String): String; overload; virtual;
...

TDerived = class(TBase)
...
  function DisappearRoutine1: String; reintroduce; overload;
  function DisappearRoutine1(const sName: String): String; reintroduce; overload;
...
* 要使用reintroduce关键字避免编译器产生警告信息；
* 重载方法以对象声明类型为主
* 首先在子类搜索适当的方法

原本delphi是会有垃圾收集机制的(叹

第三章
place holder方法是VCL Framework在设计核心组件类时最常使用的手法
逐渐增加法
父类提供基础实现，派生类提供更多实现；
先使用inherited关键字调用父类的构造函数；
如TControl的构造函数；
三明治手法
逐渐增加法的变异，在使用inherited之前先加入一些派生类的程序代码，
然后使用inherited调用父类方法，最后再加入派生类实现代码；因此叫三明治；
如TControl的ReadState；
覆写父类实现法
一种是完全覆写，编译器会提供警告；
一种不是完全覆写，不会产生警告；
Bootstrap设计法
父类会定义各种服务方法，但是这些服务都需要特定的标地，这个特定的标地只由派生类提供；
如TCanvas和TControlCanvas类；

notify设计模式

TComponent提供基础组件服务，TControl加入处理鼠标事件等功能形成准组件类，TWinControl封装Windows控件；
通用类到准功能类到末端类

TGraphicControl：不封装Windows，自定义绘制类

Canvas.Lock和Unlock;
* 联想多线程博客http://www.cnblogs.com/del/archive/2009/02/05/1384713.html

TBevel继承TGraphicControl，改写paint方法；
处理WM_PAINT窗口消息并实现了绘图，没有使用Windows的Handle；

TCustomControl：既想封装Windows又想自定义绘制

3-4-5 TCanvas和TControlCanvas
TCanvas定义实现各种不同的运算方法，但是关键的画布区域Handle值却让派生类来改写提供
如TControlCanvas类，这就是前面说的Bootstrap也叫Lazy Load技术；

3-5 COMAdmin类的设计与实现
