练习1：验证哥德巴赫猜想，大于等于6的偶数都可以表示为两个质数之和；
练习2：生成有限个三角形，比如10w个，鼠标移动，在三角形里显示为绿色，不在为红色；
1.命名和格式习惯
var
  I: Integer;
类名T开头，接口I开头，类私有成员变量F开头；
学习源码的命名习惯和格式习惯，比如私有接口变量也以F开头；
在重写函数的时候，尽量与源码的权限保持相同；

2.编程注意点
浮点数与0比较时，设置const变量如1E-5，进行比较；
尽量不使用全局变量，一般都可以设为某个类的成员变量；
在使用到某个类如TList<Triangle>,TPoint时，采用继承的方式写一个新类如
TMyTriList = class(TList<Triangle>)
published
  ...
private
  ...
protected
  ...
public
  ...
end;
定义一个自己的类去实现功能；
实时思考如何把一个组件抽离出来去写；
如练习2中，原本是直接将三角形都绘制到TForm上，后来改为继承TCustomControl写TMyPaint，override了paint方法；
更加清爽，实现了分离；
当发现某个部分使用频繁的时候，将它抽出来写成一个函数；
要习惯使用property对变量的读写进行封装；

3.练习的优化
在第一个练习中，最主要的优化是针对验证一个数是否是素数的函数，这里上传的是T同事的做法，实现了目前最优速度；
一直还没有看...好像是那个什么筛法；
在第二个练习上，做法是先绘制全部三角形，然后绘制绿色三角形；
验证点是否在三角形内使用了重心法，参考博客https://www.cnblogs.com/graphics/archive/2010/08/05/1793393.html；
最主要的优化是引入了Bitmap；
初步使用的DoubleBuffered解决了闪现问题，也就是Canvas每次重绘的时候，都要画一遍白色底板的问题；
再然后使用Bitmap存储全部的红色三角形，鼠标每次移动的时候，都是将Bitmap绘制到canvas上，而非canvas频繁重绘全部三角形；
（这个是导师的推荐，改成这个以后，10w个三角形也不存在卡顿了）
然后就是讲Triangle由record改成了class，虽然还看不出这样有什么速度的提升；
在验证点是否在三角形内时查阅了一些算法，如射线法，同向法等，感觉上是差不多的，都要乘除运算；
