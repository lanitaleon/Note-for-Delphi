题目：画图工具

需求描述：（允许理解的误差）
* 可以绘制基本图形，可以新建模型，绘制新建的模型；

原型描述：（实际操作的需求理解）
* 绘制基本图形：圆，三角形，直线，矩形；
*** 拖动绘制
*** 拖动调整位置
*** 查看并编辑图形信息
*** 缩放
* 绘制组合图形：由基本图形组成；
*** 可查看并编辑组合图形的坐标等属性
*** 拖动调整组合图形的位置
*** 缩放
*** 鼠标选取矩形框截图存储为组合图形

实际结果：
(因为参与度很低，只记录个人认为值得记录的地方)
* 最终完成度到可以嵌套一层组合图形；
*** 可以基于组合图形1绘制组合图形2；
* 在绘图过程中可以撤销删除图形，但是不能撤销操作；
*** 比如移动后，点撤销的效果是删除最后一个绘制的图形而不是返回到上一个移动的位置；
* 组合图形创建后即不能删除，且数量固定为四个；
* 组合图形无法进行属性的编辑；
*** 无法创建基于组合图形1的组合图形1.1；
* 鼠标选取矩形框的设想只完成到，点击鼠标两下，截图，这里因为跟其他操作冲突，最终选择点击鼠标中键截图，个人感官不是很好；
* 界面，丑。依然没有适应从java到delphi，从网页/游戏到工控软件的风格转换；

注意点：
(实际参与度很低，这里只记录整体的感觉以及和导师的讨论)
1.画板在实际完成项目中其实占据了比较多的篇幅，可以抽出来作为单独控件；
2.TShape这个类，MyPaint()方法中依赖于windows的Canvas内容，
导师认为跟windows耦合度太高，应该去掉，Shape只作为一个数据结构而存在；
3.关于组合图形的存储方式，项目采用的是TList<TShape>，这样很容易就出现TList嵌套TList，套好几层的情况，
但是List是传的地址，拷贝需要另外深拷贝，List的嵌套就变得很麻烦；
这里导师的设想是，打乱TList，保证最多只有一层嵌套（好像是这么说的吧），
举例：组合图形1是TList<TShape>1，然后基于图形1去创建图形2的时候，将1的基本图元拆开，然后放入2的List；
emmm实际还没有去实现过，这样的话感觉还是会在2的时候new一个基本图元，不然一样会改变1的值吧（不知道）
还提到了树形结构，这个就涉及到我的知识盲区了，感觉数据结构幸亏我又买了一本...
4.tag的使用，delphi的几乎全部组件都有tag属性，虽然用得不多，
它可以用来标记区分相同的组件，比如这次的项目中四个相同的Image，写了四个一毛一样的click响应事件；
就可以只写一个，然后通过tag去区分响应；

其他但是个人认为很重要的东西：
* 一个项目从设计初期到迭代一、迭代二，都应该有很详细地原型确认的过程，需求分析的过程，而不是急于去完成这个项目，完成哪个功能；
* 分工明确，才能合作，而不是大家一窝蜂地改，谁改好了用谁的，具体就体现在svn冲突以及赋闲的我233；
* 任何一个新添加的需求，都应该被评审并认可，而不是PM一拍脑袋，我们做这个，然后就去做这个；
* 真正意识到老师上课讲的东西是实用的，竟然是工作培训期跟队友的磨合不顺利的时候233心情复杂，有些想当然的事情，其实还是需要去学习的；
* 软件软件，改变世界。
* 良好的设计习惯养成，在实际写代码的过程中，初期规划做得不够，后期整改就大费周章，以前我也觉得，功能完成再改也一样，结构差就差点嘛，
而其实从项目二就可以看出来，如果最早就从把画板抽离出来这个思路去入手，应该会更清晰也更快，
何况以后应该会面对很复杂的大项目，下意识地架构设计是很重要的事情

差不多就到这里，170801-14:40

补充，被废弃的自己写的部分：
* 实现添加组合图形界面
设计了一个下拉框联动一个表格，添加的图形被加入一个ListView里，使用ListView嵌套ImageList；
delphi中似乎默认就是有拖拽事件的，实际上只需要在需要拖放的组件上添加dragdrop事件；
ImageList嵌套在ListView中时，删除出bug，通过检查发现
ListView.DeleteSelected的表现为删除，位置还在，这时设置属性自动左移，才会将后续往前；
Imagelist.Delete(Item)之后，表现为删除，自动左移一格；
两者一起使用，表现出来的效果是，
依次插入圆、三角形、矩形、直线；（带有下标cir，tri，Rec，line）
删除圆；
表格显示矩形（tri），直线（rec），空白（line）；
第一次的解决方案是只使用ListView的删除，效果是，
依次插入圆、三角形、矩形、直线；（带有下标cir，tri，Rec，line）
删除圆；
表格显示三角形（tri），矩形（rec），直线（line）；
看起来很正常，输出imagelist.Count，理所当然地没有被清空，可以认为这是不合理的，不应该这样去做，即使很正常；
第二次解决方案中，尝试只删除ImageList，这时发现它会自动前移，目前的解决方案是，
在ImageList末端插入空白图，遍历ImageList，将I的元素移动到I+1的位置，
这样可以保证ImageList的I与ListView的I保持一致；
其实觉得这样也不好，但是没有想到比较好的解决方案；导师觉得小问题不要花费太多时间233

* ImageList的删除为什么是自动前移的而ListView是可以设置的
